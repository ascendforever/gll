
__all__ = [
    'PartitionLen',
    # 'partition_len',
    'PartitionLenUnsafe',
    # 'partition_len_unsafe',
]

from gll.__common import *
from gll.__static.__static import *

Y = t.TypeVar("Y")


SequenceT = t.TypeVar('Sequence_T', bound=abcs.Sequence) # VERY IMPORTANT - MAKES Sequence_T HAVE TO BE A SUBCLASS OF SEQUENCE
# noinspection PyPropertyDefinition
class PartitionLen(t.Generic[SequenceT], abcs.Sized): # DO NOT INHERIT FROM abcs.Iterable BECAUSE TYPE CHECKER GETS REALLY DUMB WITH IT HERE
    """[Created 4/17/22 // old version a long time ago]"""
    @property
    def iterable(self) -> SequenceT: ...
    @property
    def length(self) -> int: ...
    @property
    def iterations(self) -> int: ...
    @property
    def remainder(self) -> int: ...
    @property
    def sizes(self) -> int: ...
    def __init__(self, iterable:SequenceT, sizes:int): ...
    def __iter__(self) -> abcs.Iterator[SequenceT]: ...
    def __len__(self) -> int: ...
# noinspection PyPropertyDefinition
class PartitionLenUnsafe(t.Generic[SequenceT], abcs.Sized): # DO NOT INHERIT FROM abcs.Iterable BECAUSE TYPE CHECKER GETS REALLY DUMB WITH IT HERE# real implementation different
    """Does no check on `size` during initlization
    [Created 4/17/22 // old version a long time ago]"""
    @property
    def iterable(self) -> SequenceT: ...
    @property
    def length(self) -> int: ...
    @property
    def iterations(self) -> int: ...
    @property
    def remainder(self) -> int: ...
    @property
    def sizes(self) -> int: ...
    def __init__(self, iterable:SequenceT, sizes:int): ...
    def __iter__(self) -> abcs.Iterator[SequenceT]: ...
    def __len__(self) -> int: ...
